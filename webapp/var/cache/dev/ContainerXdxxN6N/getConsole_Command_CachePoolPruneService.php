<?php

namespace ContainerXdxxN6N;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getConsole_Command_CachePoolPruneService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'console.command.cache_pool_prune' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\CachePoolPruneCommand
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 5).'/lib/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 5).'/lib/vendor/symfony/framework-bundle/Command/CachePoolPruneCommand.php';

        $container->privates['console.command.cache_pool_prune'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\CachePoolPruneCommand(new RewindableGenerator(function () use ($container) {
            yield 'cache.doctrine.orm.default.result.traceable' => ($container->privates['cache.doctrine.orm.default.result.traceable'] ?? $container->getCache_Doctrine_Orm_Default_Result_TraceableService());
            yield 'cache.doctrine.orm.default.query.traceable' => ($container->privates['cache.doctrine.orm.default.query.traceable'] ?? $container->getCache_Doctrine_Orm_Default_Query_TraceableService());
            yield 'cache.validator.traceable' => ($container->privates['cache.validator.traceable'] ?? $container->getCache_Validator_TraceableService());
            yield 'cache.serializer.traceable' => ($container->privates['cache.serializer.traceable'] ?? $container->getCache_Serializer_TraceableService());
            yield 'cache.annotations.traceable' => ($container->privates['cache.annotations.traceable'] ?? $container->getCache_Annotations_TraceableService());
            yield 'cache.property_info.traceable' => ($container->privates['cache.property_info.traceable'] ?? $container->getCache_PropertyInfo_TraceableService());
            yield 'cache.security_expression_language.traceable' => ($container->privates['cache.security_expression_language.traceable'] ?? $container->getCache_SecurityExpressionLanguage_TraceableService());
            yield 'cache.app' => ($container->services['cache.app'] ?? $container->getCache_AppService());
            yield 'cache.system' => ($container->services['cache.system'] ?? $container->getCache_SystemService());
            yield 'cache.validator_expression_language' => ($container->services['cache.validator_expression_language'] ?? $container->getCache_ValidatorExpressionLanguageService());
        }, 10));

        $instance->setName('cache:pool:prune');
        $instance->setDescription('Prune cache pools');

        return $instance;
    }
}
