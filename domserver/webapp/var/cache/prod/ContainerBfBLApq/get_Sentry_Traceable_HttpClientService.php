<?php

namespace ContainerBfBLApq;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class get_Sentry_Traceable_HttpClientService extends App_KernelProdContainer
{
    /*
     * Gets the private '.sentry.traceable.http_client' shared service.
     *
     * @return \Sentry\SentryBundle\Tracing\HttpClient\TraceableHttpClient
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 5).'/lib/vendor/symfony/http-client-contracts/HttpClientInterface.php';
        include_once \dirname(__DIR__, 5).'/lib/vendor/sentry/sentry-symfony/src/Tracing/HttpClient/AbstractTraceableHttpClient.php';
        include_once \dirname(__DIR__, 5).'/lib/vendor/sentry/sentry-symfony/src/Tracing/HttpClient/TraceableHttpClientForV6.php';
        include_once \dirname(__DIR__, 5).'/lib/vendor/symfony/http-client/HttpClient.php';

        $a = \Symfony\Component\HttpClient\HttpClient::create([], 6);

        $b = new \Symfony\Bridge\Monolog\Logger('http_client');
        $b->pushProcessor(($container->privates['App\\Logger\\VarargsLogMessageProcessor'] ?? ($container->privates['App\\Logger\\VarargsLogMessageProcessor'] = new \App\Logger\VarargsLogMessageProcessor())));
        $b->pushHandler(($container->privates['monolog.handler.console'] ?? $container->getMonolog_Handler_ConsoleService()));
        $b->pushHandler(($container->privates['monolog.handler.main'] ?? $container->getMonolog_Handler_MainService()));

        $a->setLogger($b);

        return $container->privates['.sentry.traceable.http_client'] = new \Sentry\SentryBundle\Tracing\HttpClient\TraceableHttpClient($a, ($container->privates['Sentry\\State\\HubInterface'] ?? $container->getHubInterfaceService()));
    }
}
